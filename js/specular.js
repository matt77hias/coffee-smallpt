// Generated by CoffeeScript 1.11.1
var ideal_specular_reflect, ideal_specular_transmit, reflectance0, schlick_reflectance;

reflectance0 = function(n1, n2) {
  var sqrt_R0;
  sqrt_R0 = (n1 - n2) / (n1 + n2);
  return sqrt_R0 * sqrt_R0;
};

schlick_reflectance = function(n1, n2, c) {
  var R0;
  R0 = reflectance0(n1, n2);
  return R0 + (1 - R0) * c * c * c * c * c;
};

ideal_specular_reflect = function(d, n) {
  return Vector3.sub(d, Vector3.mul(2.0 * Vector3.dot(n, d), n));
};

ideal_specular_transmit = function(d, n, n_out, n_in) {
  var Re, Tr, c, cos2_phi, cos_theta, d_Re, d_Tr, nl, nn, out_to_in, p_Re, p_Tr;
  d_Re = ideal_specular_reflect(d, n);
  out_to_in = Vector3.dot(n, d) < 0;
  nl = out_to_in ? n : Vector3.minus(n);
  nn = out_to_in ? n_out / n_in : n_in / n_out;
  cos_theta = Vector3.dot(d, nl);
  cos2_phi = 1.0 - (nn * nn * (1.0 - (cos_theta * cos_theta)));
  if (cos2_phi < 0) {
    return [d_Re, 1.0];
  }
  d_Tr = Vector3.sub(Vector3.mul(nn, d), Vector3.mul(nl, nn * cos_theta + Math.sqrt(cos2_phi))).normalize();
  c = 1.0 - (out_to_in ? -cos_theta : Vector3.dot(d_Tr, n));
  Re = schlick_reflectance(n_out, n_in, c);
  p_Re = 0.25 + 0.5 * Re;
  if (uniform_float() < p_Re) {
    return [d_Re, Re / p_Re];
  } else {
    Tr = 1.0 - Re;
    p_Tr = 1.0 - p_Re;
    return [d_Tr, Tr / p_Tr];
  }
};
